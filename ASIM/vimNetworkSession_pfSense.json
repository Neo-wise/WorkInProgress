{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "WorkspaceName": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('WorkspaceName')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimNetworkSession_pfSense",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('WorkspaceName'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Network Session ASIM filtering parser for pfSense",
            "category": "ASIM",
            "FunctionAlias": "vimNetworkSession_pfSense",
            "query": "let Actions=datatable(Activity:string,DvcAction:string)\r\n[ \"udp-pass\",\"Allow\"\r\n, \"udp-block\",\"Drop\"\r\n, \"tcp-pass\", \"Allow\" \r\n, \"tcp-block\",\"Drop\"\r\n, \"igmp-pass\",\"Allow\"\r\n, \"igmp-block\", \"Drop\"\r\n, \"icmp-pass\", \"Allow\"\r\n, \"icmp-block\", \"Drop ICMP\"];\r\nlet src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\nlet dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix); \r\nlet NWParser=(starttime:datetime=datetime(null), endtime:datetime=datetime(null), srcipaddr_has_any_prefix:dynamic=dynamic([]), dstipaddr_has_any_prefix:dynamic=dynamic([]), ipaddr_has_any_prefix:dynamic=dynamic([]), dstportnumber:int=int(null), hostname_has_any:dynamic=dynamic([]), dvcaction:dynamic=dynamic([]), eventresult:string='*', disabled:bool=false){\r\nCommonSecurityLog \r\n| where (isnull(starttime) or TimeGenerated>=starttime)\r\n  and     (isnull(endtime) or TimeGenerated<=endtime)\r\n| where not(disabled)\r\n| where DeviceVendor == \"NETGATE\" and DeviceProduct == \"pfsense\" and DeviceEventClassID == \"filterlog\"\r\n| where  (isnull(dstportnumber) or DestinationPort==dstportnumber)\r\n  and (array_length(hostname_has_any)==0)\r\n    and (eventresult==\"*\" or (SimplifiedDeviceAction==\"pass\" and eventresult==\"Success\") or (SimplifiedDeviceAction==\"block\" and eventresult==\"Failure\"))\r\n| extend temp_SrcMatch=has_any_ipv4_prefix(SourceIP,src_or_any)\r\n       , temp_DstMatch=has_any_ipv4_prefix(DestinationIP,dst_or_any)\r\n| extend ASimMatchingIpAddr=case(\r\n                              array_length(src_or_any) == 0 and array_length(dst_or_any) == 0 ,\"-\",\r\n                              temp_SrcMatch and temp_DstMatch, \"Both\",\r\n                              temp_SrcMatch, \"SrcIpAddr\",\r\n                              temp_DstMatch, \"DstIpAddr\",\r\n                              \"No match\"\r\n                          )\r\n  | where ASimMatchingIpAddr != \"No match\" \r\n  | project-away temp_*\r\n| extend \r\n  EventStartTime = TimeGenerated\r\n| project-rename \r\n      Dvc=Computer   \r\n    , NetworkRuleName=DeviceCustomString1\r\n| extend\r\n  EventVendor=DeviceVendor\r\n    ,EventProduct=DeviceProduct\r\n    , DstBytes=tolong(ReceivedBytes)    \r\n    , NetworkProtocol=toupper(Protocol)\r\n    , EventType=\"NetworkSession\"\r\n    , EventCount=toint(1)\r\n    , EventResult=case(DeviceAction==\"pass\",\"Success\",\"Failure\")\r\n    , EventSchemaVersion=\"0.2.3\"\r\n    , EventSchema=\"NetworkSession\"\r\n    , EventSeverity = \"Informational\"    \r\n  | extend hostelements=split(Dvc,'.')\r\n  | extend DvcHostname=tostring(hostelements[0])\r\n        , DvcDomain=strcat_array( array_slice(hostelements,1,-1), '.')\r\n  | extend DvcFQDN = iff(Dvc contains \".\",Dvc,\"\" )\r\n        , DvcDomainType=iff(Dvc contains \".\",\"FQDN\",\"\" )\r\n| project-away hostelements\r\n| lookup Actions on Activity\r\n\/\/ Action post filtering\r\n| where (array_length(dvcaction)==0 or DvcAction has_any (dvcaction))\r\n| project-rename\r\n      DstIpAddr=DestinationIP\r\n    , DstPortNumber=DestinationPort\r\n    , SrcPortNumber=SourcePort\r\n    , SrcIpAddr=SourceIP\r\n  , DvcOutboundInterface=DeviceOutboundInterface\r\n  , DvcInboundInterface=DeviceInboundInterface\r\n  , EventMessage=Message\r\n  , DvcOriginalAction=DeviceAction\r\n\/\/ -- Aliases\r\n| extend\r\n  IpAddr = SrcIpAddr,\r\n  Rule=NetworkRuleName,\r\n  Dst=DstIpAddr,\r\n  EventEndTime =EventStartTime,\r\n  Src=SrcIpAddr\r\n  | project-away AdditionalExtensions, CommunicationDirection, Device*, Destination*, EndTime, ExternalID, File*, Flex*, IndicatorThreatType, Malicious*, Old*, Process*, ReceiptTime, ReceivedBytes, Remote*, Request*, Sent*, SimplifiedDeviceAction, Source*, StartTime, TenantId, ThreatConfidence, ThreatDescription, ThreatSeverity, EventOutcome, FieldDevice*, ExtID, Reason, Activity, OriginalLogSeverity, Protocol\r\n};\r\nNWParser(starttime, endtime, srcipaddr_has_any_prefix, dstipaddr_has_any_prefix, ipaddr_has_any_prefix, dstportnumber, hostname_has_any, dvcaction, eventresult, disabled)",
            "version": 1,
            "functionParameters": "starttime:datetime=datetime(null),endtime:datetime=datetime(null),srcipaddr_has_any_prefix:dynamic=dynamic([]),dstipaddr_has_any_prefix:dynamic=dynamic([]),ipaddr_has_any_prefix:dynamic=dynamic([]),dstportnumber:int=int(null),hostname_has_any:dynamic=dynamic([]),dvcaction:dynamic=dynamic([]),eventresult:string='*',disabled:bool=False"
          }
        }
      ]
    }
  ]
}
